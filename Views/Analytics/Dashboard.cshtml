@model OpsSecProject.ViewModels.StreamingOverrallViewModel
@{
    ViewData["title"] = "Overall Logs Dashboard";
}

<!-- Page Heading -->
<h1 class="h3 mb-2 text-gray-800">Dashboard for @Model.input.Name</h1>
<p class="mb-4">Below are the details of the overall Logs that have been inputted</p>


<!--APACHE WEB SERVER -->
@if (Model.input.LogInputCategory.Equals(LogInputCategory.ApacheWebServer))
{
    <div class="row">

        <!--Cards-->
        <!-- Total IP Addresses -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Number IP Addresses</div>

                            @foreach (var log in Model.cardsTotalIps)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.totalIp</div>
                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--Total Bytes-->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Total Bytes Requested</div>

                            @foreach (var log in Model.cardsTotalBytes)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.totalBytes</div>
                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <!--IP address with most request-->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">IP Address with Most Request</div>

                            @foreach (var log in Model.cardsTopIp)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.host</div>
                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <div class="row">
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Top requests recorded by Apache Web Server</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="dashRequest"></canvas>
                    </div>
                    <hr>
                    Details of requests recorded by the Apache Web Server.
                </div>
            </div>


        </div>

        <!-- Donut/Pie Chart -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">HTTP Status</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4">
                        <canvas id="DashHttpPieChart"></canvas>
                    </div>
                    <hr>
                    Details of the various HTTP status codes as recorded based on log inputted.
                </div>
            </div>
        </div>
    </div>

    @section scripts {
        <script>
        function Handler(event) {
            // var data from db for chart

            var xa = @Html.Raw(ViewBag.xAxisJ);
            var ya = @Html.Raw(ViewBag.yAxisJ);

            // Set new default font family and font color to mimic Bootstrap's default styling
            Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
            Chart.defaults.global.defaultFontColor = '#858796';

            // Pie Chart Example
            var ctx = document.getElementById("DashHttpPieChart");
            var DashHttpPieChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: xa,
                    datasets: [{
                        data: ya,
                        backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#ffe680'],
                        hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#ffdb4d'],
                        hoverBorderColor: "rgba(234, 236, 244, 1)",
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    cutoutPercentage: 80,
                },
            });



             // Line Chart

            // var data from db for chart
            var xar = @Html.Raw(ViewBag.xAxisRJ);
            var yar = @Html.Raw(ViewBag.yAxisRJ);

            var ctx = document.getElementById("dashRequest");
            var dashRequest = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: xar,
                    datasets: [{
                        label: "Request Method",
                        lineTension: 0.3,
                        backgroundColor: "rgba(78, 115, 223, 0.05)",
                        borderColor: "rgba(78, 115, 223, 1)",
                        pointRadius: 3,
                        pointBackgroundColor: "rgba(78, 115, 223, 1)",
                        pointBorderColor: "rgba(78, 115, 223, 1)",
                        pointHoverRadius: 3,
                        pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                        pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        data: yar,
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            left: 10,
                            right: 25,
                            top: 25,
                            bottom: 0
                        }
                    },
                    scales: {
                        xAxes: [{
                            time: {
                                unit: 'Amount'
                            },
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            ticks: {
                                maxTicksLimit: 7
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                maxTicksLimit: 5,
                                padding: 10,

                            },
                            gridLines: {
                                color: "rgb(234, 236, 244)",
                                zeroLineColor: "rgb(234, 236, 244)",
                                drawBorder: false,
                                borderDash: [2],
                                zeroLineBorderDash: [2]
                            }
                        }],
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        titleMarginBottom: 10,
                        titleFontColor: '#6e707e',
                        titleFontSize: 14,
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        intersect: false,
                        mode: 'index',
                        caretPadding: 10,
                    }
                }
            });
        }


        (function () {
            'use strict';
            if (Turbolinks.supported) {
                document.addEventListener('turbolinks:load', Handler, false);
            } else {
                $(document).ready(Handler);
            }
        })();
        </script>
    }
}

<!--SSH SERVER -->

@if (Model.input.LogInputCategory.Equals(LogInputCategory.SSH))
{
    <div class="row">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Failed Logins</div>

                            @foreach (var log in Model.cardsFailedLogin)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.failedLogin</div>
                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*// User With Most Failed Logins*@
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">User With Most Failed Logins</div>

                            @foreach (var log in Model.cardsTopUserFailedLogin)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.u (@log.totalNum Logins)</div>
                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*Port with most failed login*@
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Port With Most Failed Logins</div>

                            @foreach (var log in Model.cardsTopPort)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.topPort</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.totalNumPort</div>
                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Overall Login Attempts</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4">
                        <canvas id="LoginAttempts"></canvas>
                    </div>
                    <hr>
                    Details of Total Number of Accepted/Failed Logins.
                </div>
            </div>
        </div>

        <!-- Bar Chart -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Login Attempts Over Month</h6>
            </div>
            <div class="card-body">
                <div class="chart-bar">
                    <canvas id="LoginOverTimeBarChart"></canvas>
                </div>
                <hr>
                Details of Login Attempts over the Various Months.
            </div>
        </div>
    </div>


    @section scripts {
        <script>
        function Handler(event) {
            //Charts Below

            // var data from db for chart
            var xas = @Html.Raw(ViewBag.xAxisJ);
            var yas = @Html.Raw(ViewBag.yAxisJ);

            var xam = @Html.Raw(ViewBag.xAxisM);
            var yam = @Html.Raw(ViewBag.yAxisM);
            var yam2 = @Html.Raw(ViewBag.yAxisM2);

            // Set new default font family and font color to mimic Bootstrap's default styling
            Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
            Chart.defaults.global.defaultFontColor = '#858796';


            // Pie Chart for login attempts
            var ctx = document.getElementById("LoginAttempts");
            var LoginAttempts = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: xas,
                    datasets: [{
                        data: yas,
                        backgroundColor: ['#4e73df', '#36b9cc'],
                        hoverBackgroundColor: ['#2e59d9', '#2c9faf'],
                        hoverBorderColor: "rgba(234, 236, 244, 1)",
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    cutoutPercentage: 80,
                },
            });


            // var data from db for chart


            // Bar Chart login attempts over month
            var ctx = document.getElementById("LoginOverTimeBarChart");
            var LoginOverTimeBarChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: xam,
                    datasets: [{
                        label: "Failed",
                        backgroundColor: "#ffd480",
                        hoverBackgroundColor: "#ffcc66",
                        borderColor: "#4e73df",
                        data: yam,

                    },
                    {
                        label: "Accepted",
                        backgroundColor: "#4e73df",
                        hoverBackgroundColor: "#2e59d9",
                        borderColor: "#4e73df",
                        data: yam2,
                    }



                    ],

                },

                options: {
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            left: 10,
                            right: 25,
                            top: 25,
                            bottom: 0
                        }
                    },
                    scales: {
                        xAxes: [{
                            time: {
                                unit: 'logins'
                            },
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            ticks: {
                                maxTicksLimit: 6
                            },
                            maxBarThickness: 25,
                        }],
                        yAxes: [{
                            ticks: {
                                min: 0,
                                max: 5000,
                                maxTicksLimit: 5,
                                padding: 100,

                                callback: function (value, index, values) {
                                    return number_format(value);
                                }
                            },
                            gridLines: {
                                color: "rgb(234, 236, 244)",
                                zeroLineColor: "rgb(234, 236, 244)",
                                drawBorder: false,
                                borderDash: [2],
                                zeroLineBorderDash: [2]
                            }
                        }],
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    tooltips: {
                        titleMarginBottom: 10,
                        titleFontColor: '#6e707e',
                        titleFontSize: 14,
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                        callbacks: {
                            label: function (tooltipItem, chart) {
                                var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                                return datasetLabel + ': ' + number_format(tooltipItem.yLabel);
                            }
                        }
                    },
                }

            });
        }


        (function () {
            'use strict';
            if (Turbolinks.supported) {
                document.addEventListener('turbolinks:load', Handler, false);
            } else {
                $(document).ready(Handler);
            }
        })();
        </script>
    }
}

<!--SQUID PROXY SERVER -->

@if (Model.input.LogInputCategory.Equals(LogInputCategory.SquidProxy))
{

    <!-- Content Cards -->
    <div class="row">

        <!--Cards-->
        <!-- Top content type -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Top Content Type</div>

                            @foreach (var log in Model.cardsTopContentType)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.content_type</div>
                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--Top dest ip addr-->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Top Destination IP Address</div>

                            @foreach (var log in Model.cardsTopDestIp)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.destination_ip_address</div>

                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Top Requesting user -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Top Requesting User</div>

                            @foreach (var log in Model.cardsTopReqUser)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.user</div>

                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content Charts -->
    <div class="row">

        <!-- Donut/Pie Chart -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Requested URLs</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-pie pt-4">
                        <canvas id="UrlReq"></canvas>
                    </div>
                    <hr>
                    Top 5 URLs that has been requested.
                </div>
            </div>
        </div>

        <!-- Area/Line Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Actions Recorded by Squid Server</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="reqMet"></canvas>
                    </div>
                    <hr>
                    Details of the recorded action by Squid Server.
                </div>
            </div>
        </div>
    </div>

    @section scripts {
        <script>

            function Handler(event) {

            //Charts Below

            // var data from db for chart
            var xa = @Html.Raw(ViewBag.xAxisJ);
            var ya = @Html.Raw(ViewBag.yAxisJ);

            // Set new default font family and font color to mimic Bootstrap's default styling
            Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
            Chart.defaults.global.defaultFontColor = '#858796';

            // Pie Chart Example
            var ctx = document.getElementById("UrlReq");
            var UrlReq = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: xa,
                    datasets: [{
                        data: ya,
                        backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#ffe680', '#ffcce6'],
                        hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#ffdb4d', '#ff99cc'],
                        hoverBorderColor: "rgba(234, 236, 244, 1)",
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    cutoutPercentage: 80,
                },
            });




            // Line Chart

            // var data from db for chart
            var xau = @Html.Raw(ViewBag.xAxisUserJ);
            var yaa = @Html.Raw(ViewBag.yAxisAmtJ);

            var ctx = document.getElementById("reqMet");
            var reqMet = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: xau,
                    datasets: [{
                        label: "request Method",
                        lineTension: 0.3,
                        backgroundColor: "rgba(78, 115, 223, 0.05)",
                        borderColor: "rgba(78, 115, 223, 1)",
                        pointRadius: 3,
                        pointBackgroundColor: "rgba(78, 115, 223, 1)",
                        pointBorderColor: "rgba(78, 115, 223, 1)",
                        pointHoverRadius: 3,
                        pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                        pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        data: yaa,
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            left: 10,
                            right: 25,
                            top: 25,
                            bottom: 0
                        }
                    },
                    scales: {
                        xAxes: [{
                            time: {
                                unit: 'Amount'
                            },
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            ticks: {
                                maxTicksLimit: 7
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                maxTicksLimit: 5,
                                padding: 10,

                                //callback: function (value, index, values) {
                                //    return number_format(value);
                                //}
                            },
                            gridLines: {
                                color: "rgb(234, 236, 244)",
                                zeroLineColor: "rgb(234, 236, 244)",
                                drawBorder: false,
                                borderDash: [2],
                                zeroLineBorderDash: [2]
                            }
                        }],
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        titleMarginBottom: 10,
                        titleFontColor: '#6e707e',
                        titleFontSize: 14,
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        intersect: false,
                        mode: 'index',
                        caretPadding: 10,

                    }
                }
            });



        }

        (function () {
            'use strict';
            if (Turbolinks.supported) {
                document.addEventListener('turbolinks:load', Handler, false);
            } else {
                $(document).ready(Handler);
            }
        })();
        </script>
    }

}


<!--WINDOWS EVENT LOGS -->

@if (Model.input.LogInputCategory.Equals(LogInputCategory.WindowsEventLogs))
{
    <!-- Content Cards -->
    <div class="row">

        <!--Cards-->
        <!-- Total Failed Account Logins -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Failed Account Logins</div>

                            @foreach (var log in Model.cardsFailedAccount)
                            {
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@log.totalNumFailedAccount</div>
                            }

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!--User With Most Failed Logins-->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Account With Most Failed Logins</div>

                            @*@foreach (var log in Model.cardsTopUserFailedLogin)
                                {
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">@log.u</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">@log.totalNum</div>
                                }*@

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Port with most failed login -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Sample</div>

                            @*@foreach (var log in Model.cardsTopPort)
                                {
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">@log.topPort</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">@log.totalNumPort</div>
                                }*@

                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!--Content Chart-->

    <div class="row">
    <!-- Donut/Pie Chart -->
    <div class="col-xl-4 col-lg-5">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Event IDs</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <div class="chart-pie pt-4">
                    <canvas id="chartEventId"></canvas>
                </div>
                <hr>
                Event ID of Windows Event based on log inputted.
            </div>
        </div>
    </div>


    <!-- Bar Chart -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Windows Event Activity</h6>
        </div>
        <div class="card-body">
            <div class="chart-bar">
                <canvas id="chartWinUserAct"></canvas>
            </div>
            <hr>
            Details of the various Windows User Activities that has been recorded.
        </div>
    </div>


    </div>




    <!--Content Table
    <div class="
     shadow mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table id="windowsChartTable" class="table">
                    <thead>
                        <tr>
                            <th scope="col">Account for which Log on Failed</th>

                        </tr>
                    </thead>
                    <tbody>

                        <tr>
                            <td>Admin</td>
                        </tr>
                        @*@foreach (var log in Model.charts)
                            {
                                <tr>
                                    <td>@log.response</td>

                                </tr>
                            }*@
                    </tbody>
                </table>
            </div>
        </div>
    </div>-->

    @section scripts {
        <script>
            function Handler(event) {

                // var data from db for chart
                var xEventId = @Html.Raw(ViewBag.xAxisEventId);
                var yEventId = @Html.Raw(ViewBag.yAxisEventId);

                //pie chart eventid

                var ctx = document.getElementById("chartEventId");
                var chartEventId = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: xEventId,
                        datasets: [{
                            data: yEventId,
                            backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#ffe680', '#ffcce6'],
                            hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#ffdb4d', '#ff99cc'],
                            hoverBorderColor: "rgba(234, 236, 244, 1)",
                        }],
                    },
                    options: {
                        maintainAspectRatio: false,
                        tooltips: {
                            backgroundColor: "rgb(255,255,255)",
                            bodyFontColor: "#858796",
                            borderColor: '#dddfeb',
                            borderWidth: 1,
                            xPadding: 15,
                            yPadding: 15,
                            displayColors: false,
                            caretPadding: 10,
                        },
                        legend: {
                            display: true,
                            position: 'bottom'
                        },
                        cutoutPercentage: 80,
                    },
                });



            // Bar Chart login win user act

            // var data from db for chart
            var xWinAct = @Html.Raw(ViewBag.xAxisWinAct);
            var yWinAct = @Html.Raw(ViewBag.yAxisWinAct);

            var ctx = document.getElementById("chartWinUserAct");
            var chartWinUserAct = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: xWinAct,
                    datasets: [{
                        label: "No. of occurence",
                        backgroundColor: "#ffd480",
                        hoverBackgroundColor: "#ffcc66",
                        borderColor: "#4e73df",
                        data: yWinAct,

                    }
                    ],

                },

                options: {
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            left: 10,
                            right: 25,
                            top: 25,
                            bottom: 0
                        }
                    },
                    scales: {
                        xAxes: [{
                            time: {
                                unit: 'Activity'
                            },
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            ticks: {
                                maxTicksLimit: 6
                            },
                            maxBarThickness: 25,
                        }],
                        yAxes: [{
                            ticks: {
                                min: 0,
                                max: 15000,
                                maxTicksLimit: 5,
                                padding: 100,

                                callback: function (value, index, values) {
                                    return number_format(value);
                                }
                            },
                            gridLines: {
                                color: "rgb(234, 236, 244)",
                                zeroLineColor: "rgb(234, 236, 244)",
                                drawBorder: false,
                                borderDash: [2],
                                zeroLineBorderDash: [2]
                            }
                        }],
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    tooltips: {
                        titleMarginBottom: 10,
                        titleFontColor: '#6e707e',
                        titleFontSize: 14,
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                        callbacks: {
                            label: function (tooltipItem, chart) {
                                var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                                return datasetLabel + ': ' + number_format(tooltipItem.yLabel);
                            }
                        }
                    },
                }

            });





            }

            (function () {
                'use strict';
                if (Turbolinks.supported) {
                    document.addEventListener('turbolinks:load', Handler, false);
                } else {
                    $(document).ready(Handler);
                }
            })();
        </script>
    }

}
