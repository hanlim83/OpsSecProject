@model OpsSecProject.Models.LogInput
@{
    ViewData["Title"] = "Machine Learning";
}
@if (!String.IsNullOrEmpty(Convert.ToString(TempData["Alert"])) && TempData["Alert"].Equals("Warning") && !String.IsNullOrEmpty(Convert.ToString(TempData["Message"])))
{
    <div class="form-label-group">
        <div class="alert alert-warning" role="alert">
            @TempData["Message"]
        </div>

    </div>
}
@if (!String.IsNullOrEmpty(Convert.ToString(TempData["Alert"])) && TempData["Alert"].Equals("Danger") && !String.IsNullOrEmpty(Convert.ToString(TempData["Message"])))
{
    <div class="form-label-group">
        <div class="alert alert-danger" role="alert">
            @TempData["Message"]
        </div>

    </div>
}
@if (!String.IsNullOrEmpty(Convert.ToString(TempData["Alert"])) && TempData["Alert"].Equals("Success") && !String.IsNullOrEmpty(Convert.ToString(TempData["Message"])))
{
    <div class="form-label-group">
        <div class="alert alert-success" role="alert">
            @TempData["Message"]
        </div>

    </div>
}
<h1 class="h3 mb-2 text-gray-800">Manage Log Input</h1>
<p class="mb-4"></p>
<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Summary</h6>
        </div>
        <div class="card-body">
            <form>
                <div class="form-group row">
                    <label asp-for="Name" class="col-sm-4 col-form-label">Log Input Name</label>
                    <div class="col-sm-8">
                        <input asp-for="Name" readonly class="form-control-plaintext" value="@Model.Name">
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="LinkedS3Bucket.Name" class="col-sm-4 col-form-label">S3 Bucket</label>
                    <div class="col-sm-8">
                        <input asp-for="LinkedS3Bucket.Name" readonly class="form-control-plaintext" value="@Model.LinkedS3Bucket.Name">
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="InitialIngest" class="col-sm-4 col-form-label">Status</label>
                    <div class="col-sm-8">
                        @if (Model.InitialIngest == false)
                        {
                            <input asp-for="InitialIngest" type="text" readonly class="form-control-plaintext" value="Waiting for events">
                        }
                        @if (Model.InitialIngest == true)
                        {
                            <input asp-for="InitialIngest" type="text" readonly class="form-control-plaintext" value="Receiving and Processing Events">
                        }
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Total Event Count</label>
                    <div class="col-sm-8">
                        @if (Model.InitialIngest == false)
                        {
                            <input readonly class="form-control-plaintext" value="0">
                        }
                        @if (Model.InitialIngest == true)
                        {
                            <input readonly class="form-control-plaintext" value="@ViewData["LogInputEventCount"]">
                        }
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Machine Learning (IP Insights Algorithm)</h6>
            </div>
            <div class="card-body">
                <form class="needs-validation" novalidate asp-action="StartTrainingIPS">
                    <div class="form-group text-center">
                        <h6 class="mb-3">Training Type:</h6>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="TrainingType" value="Auto" id="IPSTrainingTypeAuto" class="custom-control-input" required onclick="$('.ips-field-selection').hide();">
                            <label class="custom-control-label" for="IPSTrainingTypeAuto">Automatic Training</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="TrainingType" value="Manual" id="IPSTrainingTypeManual" class="custom-control-input" required onclick="$('.ips-field-selection').show();">
                            <label class="custom-control-label" for="IPSTrainingTypeManual">Manual Training</label>
                        </div>
                    </div>
                    <div class="form-group ips-field-selection" style="display:none;">
                        <label for="IdentitySourceFieldSelect">Select field that contains the Identity</label>
                        <select name="identitySourceField" id="IdentitySourceFieldSelect" class="custom-select" required>
                            @foreach (var field in ViewBag.fields)
                            {
                                @if (string.Equals(field, ViewData["DefaultUserFieldIPS"]))
                                {
                                    <option selected value="@field">@field</option>
                                }
                                <option value="@field">@field</option>
                            }
                        </select>
                    </div>
                    <div class="form-group ips-field-selection" style="display:none;">
                        <label for="IPAddressSourceFieldSelect">Select field that contains the ip address</label>
                        <select name="ipAddressSourceField" id="IPAddressSourceFieldSelect" class="custom-select" required>
                            @foreach (var field in ViewBag.fields)
                            {
                                @if (string.Equals(field, ViewData["DefaultIPAddressFieldIPS"]))
                                {
                                    <option selected value="@field">@field</option>
                                }
                                <option value="@field">@field</option>
                            }
                        </select>
                    </div>
                    <div class="form-group ips-field-selection" style="display:none;">
                        <label for="CondtionSourceFieldSelect">Select field that used to determine what events should be used for training</label>
                        <select name="condtionSourceField" id="CondtionSourceFieldSelect" class="custom-select" required>
                            @foreach (var field in ViewBag.fields)
                            {
                                @if (string.Equals(field, ViewData["DefaultConditionFieldIPS"]))
                                {
                                    <option selected value="@field">@field</option>
                                }
                                <option value="@field">@field</option>
                            }
                        </select>
                    </div>
                    <div class="form-group text-center ips-field-selection" style="display:none;">
                        <h6 class="mb-3">Condition Type:</h6>
                        @if (Model.LogInputCategory.Equals(LogInputCategory.ApacheWebServer))
                        {
                            <div class="custom-control custom-radio custom-control-inline">
                                <input type="radio" name="ConditionType" value="Equals" id="ConditionTypeEquals" class="custom-control-input" checked required>
                                <label class="custom-control-label" for="ConditionTypeEquals">Matches</label>
                            </div>
                        }
                        @if (!Model.LogInputCategory.Equals(LogInputCategory.ApacheWebServer))
                        {
                            <div class="custom-control custom-radio custom-control-inline">
                                <input type="radio" name="ConditionType" value="Equals" id="ConditionTypeEquals" class="custom-control-input" required>
                                <label class="custom-control-label" for="ConditionTypeEquals">Matches</label>
                            </div>
                        }
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="ConditionType" value="NotEquals" id="ConditionTypeNotEquals" class="custom-control-input" required>
                            <label class="custom-control-label" for="ConditionTypeNotEquals">Does not match</label>
                        </div>
                        @if (Model.LogInputCategory.Equals(LogInputCategory.SSH))
                        {
                            <div class="custom-control custom-radio custom-control-inline">
                                <input type="radio" name="ConditionType" value="Similar" id="ConditionTypeSimilar" class="custom-control-input" checked required>
                                <label class="custom-control-label" for="ConditionTypeSimilar">Similar to</label>
                            </div>
                        }
                        @if (!Model.LogInputCategory.Equals(LogInputCategory.SSH))
                        {
                            <div class="custom-control custom-radio custom-control-inline">
                                <input type="radio" name="ConditionType" value="Similar" id="ConditionTypeSimilar" class="custom-control-input" required>
                                <label class="custom-control-label" for="ConditionTypeSimilar">Similar to</label>
                            </div>
                        }
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="ConditionType" value="NotSimilar" id="ConditionTypeNotSimilar" class="custom-control-input" required>
                            <label class="custom-control-label" for="ConditionTypeNotSimilar">Not similar to</label>
                        </div>
                    </div>
                    <div class="form-group ips-field-selection" style="display:none;">
                        <label for="CondtionInput">Specify the condtion used to determine what events should be used for training</label>
                        <input type="text" class="form-control" name="Condtion" id="CondtionInput" value="@ViewData["DefaultConditionIPS"]" required />
                    </div>
                    <div class="form-group">
                        <input type="hidden" asp-for="ID" value="@Model.ID" required />
                    </div>
                    <button type="submit" class="btn btn-primary formBtnSubmit">Start Machine Learning</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Machine Learning (Random Cut Forest Algorithm)</h6>
            </div>
            <div class="card-body">
                <form class="needs-validation" novalidate asp-action="StartTrainingRCF">
                    <div class="form-group text-center">
                        <h6 class="mb-3">Training Type:</h6>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="TrainingType" value="Auto" id="RCFTrainingTypeAuto" class="custom-control-input" required onclick="$('.rcf-field-selection').hide();">
                            <label class="custom-control-label" for="RCFTrainingTypeAuto">Automatic Training</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="TrainingType" value="Manual" id="RCFTrainingTypeManual" class="custom-control-input" required onclick="$('.rcf-field-selection').show();">
                            <label class="custom-control-label" for="RCFTrainingTypeManual">Manual Training</label>
                        </div>
                    </div>
                    <div class="form-group rcf-field-selection" style="display:none;">
                        <label for="CondtionSourceFieldSelect">Select field that used to determine what events should be used for training</label>
                        <select name="condtionSourceField" id="CondtionSourceFieldSelect" class="custom-select" required>
                            @foreach (var field in ViewBag.fields)
                            {
                                @if (string.Equals(field, ViewData["DefaultConditionFieldRCF"]))
                                {
                                    <option selected value="@field">@field</option>
                                }
                                <option value="@field">@field</option>
                            }
                        </select>
                    </div>
                    <div class="form-group text-center rcf-field-selection" style="display:none;">
                        <h6 class="mb-3">Condition Type:</h6>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="ConditionType" value="Equals" id="ConditionTypeEquals" class="custom-control-input" required>
                            <label class="custom-control-label" for="ConditionTypeEquals">Matches</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="ConditionType" value="NotEquals" id="ConditionTypeNotEquals" class="custom-control-input" required>
                            <label class="custom-control-label" for="ConditionTypeNotEquals">Does not match</label>
                        </div>
                        @if (Model.LogInputCategory.Equals(LogInputCategory.SSH) || Model.LogInputCategory.Equals(LogInputCategory.ApacheWebServer))
                        {
                            <div class="custom-control custom-radio custom-control-inline">
                                <input type="radio" name="ConditionType" value="Similar" id="ConditionTypeSimilar" class="custom-control-input" checked required>
                                <label class="custom-control-label" for="ConditionTypeSimilar">Similar to</label>
                            </div>
                        }
                        @if (!Model.LogInputCategory.Equals(LogInputCategory.SSH) && !Model.LogInputCategory.Equals(LogInputCategory.ApacheWebServer))
                        {
                            <div class="custom-control custom-radio custom-control-inline">
                                <input type="radio" name="ConditionType" value="Similar" id="ConditionTypeSimilar" class="custom-control-input" required>
                                <label class="custom-control-label" for="ConditionTypeSimilar">Similar to</label>
                            </div>
                        }
                        <div class="custom-control custom-radio custom-control-inline">
                            <input type="radio" name="ConditionType" value="NotSimilar" id="ConditionTypeNotSimilar" class="custom-control-input" required>
                            <label class="custom-control-label" for="ConditionTypeNotSimilar">Not similar to</label>
                        </div>
                    </div>
                    <div class="form-group rcf-field-selection" style="display:none;">
                        <label for="CondtionInput">Specify the condtion used to determine what events should be used for training</label>
                        <input type="text" class="form-control" name="Condtion" id="CondtionInput" value="@ViewData["DefaultConditionRCF"]" required />
                    </div>
                    <div class="form-group">
                        <input type="hidden" asp-for="ID" value="@Model.ID" required />
                    </div>
                    <button type="submit" class="btn btn-primary formBtnSubmit">Start Machine Learning</button>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Get Inference From Machine Learning Model</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table id="machineLearningTable" class="table">
                    <thead>
                        <tr>
                            <th scope="col">Algorithm</th>
                            <th scope="col">Condition Field</th>
                            <th scope="col">Condition</th>
                            <th scope="col">Field with IP Address</th>
                            <th scope="col">Field with Identity</th>
                            <th scope="col">Status</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sagemaker in Model.LinkedSagemakerEntities)
                        {
                            <tr>
                                <th scope="row">@sagemaker.SagemakerAlgorithm.ToString()</th>
                                <td>@sagemaker.CondtionalField</td>
                                <td>@sagemaker.Condtion</td>
                                @if (sagemaker.SagemakerAlgorithm.Equals(SagemakerAlgorithm.IP_Insights))
                                {
                                    <td>@sagemaker.IPAddressField</td>
                                    <td>@sagemaker.UserField</td>
                                }
                                @if (sagemaker.SagemakerAlgorithm.Equals(SagemakerAlgorithm.Random_Cut_Forest))
                                {
                                    <td colspan="2">N.A.</td>
                                }
                                <td>@sagemaker.SagemakerStatus.ToString()</td>
                                <td></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Get Inference From Machine Learning Model</h6>
        </div>
        <div class="card-body">
            <form class="needs-validation" novalidate asp-action="Inferencing">
                <div class="form-group">
                    <input type="hidden" name="SageMakerID" id="SageMakerID" required />
                </div>
                <div class="form-group">
                    <label for="predictionInputContent">Data to predict</label>
                    <textarea name="predictionInputContent" id="predictionInputContent" class="form-control" required disabled></textarea>
                    <div class="invalid-feedback">
                        Please enter the data to infer from
                    </div>
                </div>
                <div class="form-group">
                    <input type="hidden" asp-for="ID" value="@Model.ID" required />
                </div>
                <button type="submit" class="btn btn-primary formBtnSubmit">Get Inference</button>
            </form>
        </div>
    </div>
</div>
@section scripts {
    <script>
        function Handler(event) {
            $('#machineLearningTable').DataTable();
        }
        (function () {
            'use strict';
            if (Turbolinks.supported) {
                document.addEventListener('turbolinks:load', Handler, false);
            } else {
                $(document).ready(Handler);
            }
        })();
    </script>
}